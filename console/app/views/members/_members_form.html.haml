:css
  .members table { 
    margin-bottom: 0px;
  }
  .members .table td {
    vertical-align: middle;
  }
  .members table td.member {
    overflow: hidden;
    text-overflow: ellipsis;
  }
  .members table input {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
  }  
  .members table select { 
    margin-bottom: 0;
    white-space: nowrap;
    width: 100%;
  }
  .members table input[type="text"] {
    width: 100%;
    height: auto;
  }

  .members aside {
    margin-top: 16px
  }

  .members tr.error-row td   { padding-top: 0px; }
  .members tr.error-row td p { margin-top: 0; }
  .members tr.template {display: none !important; }
  .members tr.no-role select, .members tr.no-role a.remove-member { opacity: .4; }
  .members tr.collapsed { display: none; }
  .members tr.team-details td { white-space: wrap; overflow: hidden; text-overflow: ellipsis; padding-left: 32px; }
  
  .members .edit-only { display: none; }
  .members.editing .edit-only { display: block; }
  .members.editing tr.edit-only { display: table-row; }
  .members.editing .read-only { display: none; }

  .hidden-scripted { display: none; }

  .type-user .icon-user {opacity: .6;}


%noscript
  :css
    .hidden-scripted { display: block; }

    a.remove-member, a.remove-new-member, a.add-member, .script-only { display: none !important; }
    .members .edit-only { display: block; }
    .members tr.edit-only { display: table-row; }
    .members .read-only { display: none; }
    .members tr.no-role select, .members tr.no-role a.remove-member { opacity: 1; }
    .members tr.collapsed { display: table-row; }


- owner = members.find(&:owner)
- explicit_members = members.reject(&:owner).select(&:explicit_role?).sort
- if not editable
  .members
    %table.table.table-condensed.table-fixed
      %colgroup
        %col{:width => "50%"}
        %col{:width => "50%"}

      - if owner
        %tr
          %td.nowrap.member{:title => owner.name}
            %span{:'aria-hidden' => "true", :class => "icon-user"}
            = owner.name
          %td Owner

      - explicit_members.each do |member|
        %tr{:class => "type-#{member.type}"}
          %td.nowrap.member{:title => member.name}
            - if member.team?
              %span{:'aria-hidden' => "true", :class => "icon-users"}
              = member.name
            - else
              %span{:'aria-hidden' => "true", :class => "icon-user"}
              = member.name
          %td
            = Role.description_for(member.role)

- else
  - if members.count <= 1 && !editing
    %p{:'data-hide-parent' => '1'}
      No one else can see this domain. #{link_to "Add users...", "javascript:;", :'data-unhide' => '.members'}

  = form_tag domain_members_path(domain), :method => :put, :class => "members warn-dirty #{'editing' if editing || members.count <= 1} #{'hidden-scripted' if !editing && members.count <= 1} #{'dirty' if new_members.present?}" do

    %table.table.table-condensed.table-no-borders.table-fixed
      %colgroup
        %col{:width => "45%"}
        %col{:width => "45%"}
        %col.script-only{:width => "30"}

      - if owner
        %tr
          %td.nowrap.member{:title => owner.name}
            %span{:'aria-hidden' => "true", :class => "icon-user"}
            = owner.name
          %td Owner
          %td.script-only

      - explicit_members.each do |member|
        - member_teams = member.teams(members)
        %tr{:class => "type-#{member.type}"}
          %td.nowrap.member{:title => member.name}
            - if member.team?
              %span{:'aria-hidden' => "true", :class => "icon-users"}
              = link_to member.name, "javascript:;", {'data-target' => "#team-#{member.id}", 'data-toggle' => 'team'}
            - else
              %span{:'aria-hidden' => "true", :class => "icon-user"}
              = member.name
          %td.nowrap
            .read-only
              - if member.explicit_role == member.role
                = Role.description_for(member.role)
              - elsif member_teams.present?
                = Role.description_for(member.role)
                via 
                %span{:'aria-hidden' => "true", :class => "icon-users", :title => "Has access via these teams:\n#{member_teams.map(&:name).join(", \n")}"}
              - else
                = Role.description_for(member.role)
            .edit-only
              -# Always start with a common field to make param hashes group correctly
              = hidden_field_tag('members[][type]', member.type)
              = hidden_field_tag('members[][id]', member.id)
              = select_tag('members[][role]', options_for_select(Role.role_descriptions(true, member_teams.present?), {:selected => member.explicit_role || :none}))
          %td.script-only
            .edit-only
              = link_to('javascript:;', :class => 'remove-member btn btn-mini') do
                %span.icon-remove{'aria-hidden'=>"true"}
        - if member.team?
          %tr.team-details.collapsed{:id => "team-#{member.id}"}
            %td{:colspan => 3}
              - if (team_members = members.select {|m| m.grant_from?('team', member.id)}).present?
                Team members: 
                = team_members.map(&:name).to_sentence
              - else
                No team members

      - new_members = (new_members || []).dup
      - new_members << Domain::Member.new(:role => :edit) if new_members.blank? and members.count == 1
      - new_members << (template = Domain::Member.new(:role => :edit))
      - new_members.each do |new_member|
        - error = (new_member.errors[:login] || []).first
        %tr.edit-only.control-group{:class => "#{'error' if error} #{'template' if new_member.equal?(template)}"}
          %td
            -# Always start with a common field to make param hashes group correctly
            = hidden_field_tag('members[][type]', 'user')
            = text_field_tag('members[][login]', new_member.login, {:placeholder => 'User Login', :title => 'User Login', :autocomplete => 'off', :class => ('error' if error)})
          %td
            = select_tag('members[][role]', options_for_select(Role.role_descriptions(false), new_member.role))
          %td.script-only
            = link_to('javascript:;', :class => 'remove-new-member btn btn-mini') do
              %span.icon-remove{'aria-hidden'=>"true"}
        - if error
          %tr.edit-only.control-group.error.error-row.borderless
            %td{:colspan => 3}
              %p.help-inline= error

      %tr.borderless
        %td{:colspan => 3}
          .form-actions.edit-only
            = link_to 'Add another user...', 'javascript:;', :class => 'add-member'
          .form-actions.read-only.script-only
            = link_to "Edit members...", "javascript:;", :class => 'edit-members'

    .form-actions.edit-only
      = link_to "Cancel", domain_path(@domain), :class => 'btn btn-small cancel script-only'
      = button_tag "Save", :type => :submit, :class => 'btn btn-primary-when-dirty btn-small'

    .edit-only
      %h6 What can members do?
      %ul.unstyled
        %li
          %strong View
          &ndash; Read-only access to the domain and its applications.

        %li
          %strong Edit
          &ndash; Add, edit, control and delete applications in the domain, including SSH and Git access

        %li
          %strong Administer
          &ndash; Everything except change allowed gear sizes and the domain name.


  - content_for :javascripts do
    :javascript
      $(function(){
        $('.members').find('select').change(function() {
          var $this = $(this);
          var $tr = $this.closest('tr');
          $tr.toggleClass("no-role", $this.val() == 'none');
        }).on('keypress', function(){
          var $this = $(this);
          var was = $this.val();
          setTimeout(function(){
            if (was != $this.val()) {
              $this.trigger('change');
            }
          }, 1);
        });

        $('a.remove-member').click(function() {
          $(this).closest('tr').find('select').val('none').trigger('change');
        });

        $('a.remove-new-member').click(function() {
          var $tr = $(this).closest('tr');
          $tr.next('tr.error').remove();
          $tr.remove();
        });

        $('a.add-member').click(function() {
          var $template = $('.members tr.template');
          $template.clone(true).removeClass('template').insertBefore($template).find('input').focus();
        });

        $('.members a.edit-members').click(function() {
          var $members = $(this).closest('.members').addClass('editing');
          setTimeout(function() {
            $members.find('input[type=text]:visible').first().focus();
          }, 1);
        });

        $("[data-toggle=team]").click(function(){
          var target = $(this).data("target");
          console.log(target);
          if (target) {
            var $target = $(target);
            console.log($target);
            $target.toggleClass("collapsed");
          }
        });
      });
